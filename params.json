{"body":"jAddressParser\r\n==============\r\n\r\nA Javascript library for parsing valid address strings into their constituent elements.\r\n\r\nIt is hosted on GitHub at [brianmhunt/jAddressParser](http://github.com/brianmhunt/jAddressParser).\r\n\r\nPurpose\r\n-------\r\n\r\nThis project exists to crowdsource the difficult problem of parsing addresses. It is intended to assist with the verification that addresses are properly formatted, and where they are properly formatted to parse and return their respective constituents.\r\n\r\nAt the moment this project does not aim to verify that an address is consistent with reality. For example, this library shall not verify that a given address in California has a local zip-code.\r\n\r\nUsage\r\n-----\r\n\r\nAn example in `node.js`:\r\n\r\n    > ap = require('./jAddressParser')\r\n\r\n    > ap.parse(\"100 Bay Street\\nToronto, ON M5H 1T1\\nCanada\")\r\n    { suite: '',\r\n      addressee: '',\r\n      street_number: '100',\r\n      street_name_2: '',\r\n      municipality: 'Toronto',\r\n      province: 'ON',\r\n      postal: 'M5H 1T1',\r\n      country: 'Canada',\r\n      street_name: 'Bay Street' }\r\n\r\nAPI\r\n---\r\n\r\n### `jAddressParser = require('jAddressParser')`\r\n\r\nReturn an instance of the Address Parser. Uses the [amdefine](https://github.com/jrburke/amdefine) module for Node.js compatibility.\r\n\r\n### `jAddressParser.parse(address_string, defaultCountry)`\r\n\r\nParse the `address_string`, returning an object or throwing an exception where the address cannot be parsed.\r\n\r\nIf the `address_string` ends in a valid country name, that country is used, otherwise `defaultCountry` is used.\r\n\r\nThe object returned will contain the elements corresponding to the given country.\r\n\r\n**TODO** Where the `address_string` is ambiguous, return a message indicating that the string is ambiguous, and provide the multiple matching results so that the user can choose which is correct.\r\n\r\nContributing\r\n------------\r\n\r\nDrop me a message or send along a pull request on GitHub. I would be delighted to co-ordinate support for addresses that may interest you.\r\n\r\nThe project is intended to divide-and-conquer. Each country has a strategy for parsing addresses, which strategy may be broken down into a variety of sub-strategies. In this way, I hope edge cases can eventually be shored up.\r\n\r\nThe built-in tests allow for easy verification that addresses return the expected fields. See for example `test/canada.coffee`.\r\n\r\nBrowser Installation\r\n--------------------\r\n\r\nTo install on the browser you can simply copy `build/jAddressParser.js` or `build/jAddressParser.min.js` to your project and include it in your project with eg the RequireJS `require('jAddressParser')`.\r\n\r\n- [lodash](https://github.com/bestiejs/lodash) (or [underscore](http://underscorejs.org/))\r\n- [XRegExp](http://xregexp.com/)\r\n- AMD eg [requirejs](http://requirejs.org/)\r\n\r\nRequirements for testing\r\n------------------------\r\n\r\nWith [Homebrew](http://mxcl.github.com/homebrew/)\r\n\r\n- Node.js: `brew install node`\r\n- Coffee-script `npm install -g coffee-script`\r\n\r\nOnce 'npm' and coffee-script installed, you can run `cake deps` to install the\r\nremaining npm packages.\r\n\r\nCakefile targets\r\n----------------\r\n\r\n#### `cake toast`\r\n\r\nConvert the coffeescript in the `src/` directory into a usable javascript\r\nAMD modules `build/jAddressParser.js` and `build/jAddressParser.min.js` by calling `cake toast`.\r\n\r\n#### `cake test`\r\n\r\nRun [Mocha](http://visionmedia.github.com/mocha/)-based tests on the project.\r\n\r\n### `cake deps`\r\n\r\nInstall dependencies in the `node_modules` subdirectory of the project.\r\n\r\nFuture\r\n------\r\n\r\nIt is challenging to correctly parse the plethora of possible addresses, so contributions to the parsing and testing are most welcome.\r\n\r\nSome ideas for future builds includes:\r\n\r\n- Integration with libraries or services that provide address verification\r\n- Geocoding integration\r\n\r\nLicense\r\n-------\r\nThis project is licensed under the MIT license, which is included as LICENSE in the source.\r\n","note":"Don't delete this file! It's used internally to help with page regeneration.","tagline":"A Javascript/Coffeescript library to parse address strings into their constituent elements ","google":"","name":"jAddressParser"}